#!/usr/bin/env node

var app     = require('../app')
  , debug   = require('debug')('yodel-stats:server')
  , http    = require('http')
  , program = require('commander');

program
  .option('-e, --environment <env>', 'Node environment')
  .option('-p, --port <n>', 'Port to start server on', parseInt)
  .parse(process.argv);

if (program.environment) {
  process.env.NODE_ENV = program.environment;
}

var common            = require('../common')
  , HourlyAggregation = require('../models/hourly_aggregation');


// Start Express Server
var port = program.port || 3000;
app.set('port', port);

var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// Add Columns to hourly_aggregations every hour
(function addColumns() {
  HourlyAggregation.addColumns();
  var now  = new Date().getTime()
    , hour = 60 * 60 * 1000
    , then = now - (now % hour) + hour;

  setTimeout(addColumns, then - now);
})();


// Start Redis Subscriber
common.redisSubscriber.subscribe("yodel:events", function(err, data) {
  if (err) { return common.notifyError(err); }
  common.redisSubscriber.on("message", function(channel, data) {
    if (channel == 'yodel:events') {
      HourlyAggregation.track(JSON.parse(date));
    }
  });
});


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
