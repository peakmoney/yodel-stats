<% include header.ejs -%>
<h3 class="chart_title" style="margin-top: 120px">Success Rate</h3>

<div class="row overview">
  <div class="col-md-6">
    <h4 class="period">24 Hours</h4>
    <div class="stat successful successful24h col-md-6">
      <div class="name">Successful</div>
      <div class="percent"></div>
      <div class="total"><%=sum24h['successful']%></div>
    </div>
    <div class="stat failed failed24h col-md-6">
      <div class="name">Failed</div>
      <div class="percent"></div>
      <div class="total"><%=sum24h['failed']%></div>
    </div>
  </div>
  <div class="col-md-6">
    <h4 class="period">30 Days</h4>
    <div class="stat successful successful30d col-md-6">
      <div class="name">Successful</div>
      <div class="percent"></div>
      <div class="total"></div>
    </div>
    <div class="stat successful failed failed30d col-md-6">
      <div class="name">Failed</div>
      <div class="percent"></div>
      <div class="total"></div>
    </div>
  </div>
</div>
<div class="row">
  <canvas id="success_chart" width="1000" height="400"></canvas>
</div>

<hr class="divider" />

<h3 class="chart_title">Platform</h3>

<div class="row overview">
  <div class="col-md-6">
    <h4 class="period">24 Hours</h4>
    <div class="stat android android24h col-md-6">
      <div class="name">Android</div>
      <div class="percent"></div>
      <div class="total"></div>
    </div>
    <div class="stat ios ios24h col-md-6">
      <div class="name">iOS</div>
      <div class="percent"></div>
      <div class="total"></div>
    </div>
  </div>
  <div class="col-md-6">
    <h4 class="period">30 Days</h4>
    <div class="stat android android30d col-md-6">
      <div class="name">Android</div>
      <div class="percent"></div>
      <div class="total"></div>
    </div>
    <div class="stat ios ios30d col-md-6">
      <div class="name">iOS</div>
      <div class="percent"></div>
      <div class="total"></div>
    </div>
  </div>
</div>

<div class="row">
  <canvas id="platform_chart" width="1000" height="400"></canvas>
</div>

<script>
  var last12h       = <%-JSON.stringify(last12h)%>
    , sum24h        = <%-JSON.stringify(sum24h)%>
    , sum30d        = <%-JSON.stringify(sum30d)%>
    , successChart  = null
    , platformChart = null;

  renderCharts();
  renderNumbers();

  function renderNumbers() {
    var keys = ['ios', 'android', 'successful', 'failed'];
    for (var i = 0; i < keys.length; i++) {
      renderNumbersForKey(keys[i]);
    }

    function renderNumbersForKey(key) {
      $('.stat.'+key+'24h .total').text(sum24h[key]);
      $('.stat.'+key+'30d .total').text(sum30d[key]);
      $('.stat.'+key+'24h .percent').text(percentFor(sum24h, key));
      $('.stat.'+key+'30d .percent').text(percentFor(sum30d, key));
    }

    function percentFor(obj, key) {
      if (obj[key] < 1) {
        return "0%";
      } else {
        return (obj[key] / obj['total'] * 100).toPrecision(3)+"%";
      }
    }
  }


  function renderCharts() {
    var labels   = []
      , datasets = {}
      , keys     = ['ios', 'android', 'successful', 'failed'];

    for (var i = 0; i < keys.length; i++) {
      datasets[keys[i]] = [];
    }

    for (var i = 0; i < last12h.length; i++) {
      var hours = new Date(last12h[i].start_time).getHours()
      labels.unshift(((hours % 12) || 12)+(hours >= 12 ? "pm" : "am"));
      for (var j = 0; j < keys.length; j++) {
        datasets[keys[j]].unshift(last12h[i][keys[j]]);
      }
    }

    if (successChart && platformChart) {
      updateDataset(successChart.datasets[0], 'successful');
      updateDataset(successChart.datasets[1], 'failed');
      updateDataset(platformChart.datasets[0], 'android');
      updateDataset(platformChart.datasets[1], 'ios');

      successChart.update();
      platformChart.update();

      function updateDataset(dataset, key) {
        for (var i = 0; i < dataset.points.length; i++) {
          dataset.points[i].value = datasets[key][i];
        }
      }

    } else {
      successChart = newChart({
        id: "success_chart"
      , datasets: [{
          label: "Successful"
        , baseColor: "82,218,160"
        , data: datasets['successful']
        },{
          label: "Failed"
        , baseColor: "254,106,83"
        , data: datasets['failed']
        }]
      });

      platformChart = newChart({
        id: "platform_chart"
      , datasets: [{
          label: "Android"
        , baseColor: "167,255,246"
        , data: datasets['android']
        },{
          label: "iOS"
        , baseColor: "152,118,255"
        , data: datasets['ios']
        }]
      });
    }


    function newChart(opts) {
      var ctx = document.getElementById(opts.id).getContext("2d");

      var data = { labels: labels, datasets: [] };
      for (var i = 0; i < opts.datasets.length; i++) {
        var dataset = opts.datasets[i];
        data['datasets'].push({
          label: dataset['label']
        , fillColor: "rgba("+dataset['baseColor']+",0.1)"
        , strokeColor: "rgba("+dataset['baseColor']+",1)"
        , pointColor: "rgba("+dataset['baseColor']+",1)"
        , pointStrokeColor: "#fff"
        , pointHighlightFill: "#fff"
        , pointHighlightStroke: "rgba("+dataset['baseColor']+",1)"
        , data: dataset['data']
        });
      }

      var options = {
        responsive : true
      , scaleFontFamily: "Lato"
      , scaleFontColor: "rgba(255,255,255,0.5)"
      , tooltipFillColor: "rgba(46,59,66,0.8)"
      , tooltipTitleFontColor: "#eee"
      , tooltipTitleFontFamily: "Lato"
      , tooltipTitleFontSize: 13
      , tooltipFontColor: "#eee"
      , tooltipFontFamily: "Lato"
      , tooltipFontSize: 12
      , tooltipCornerRadius: 6
      , multiTooltipTemplate: "<%- multiTooltipTemplate %>"
      , tooltipCaretSize: 20
      , tooltipYPadding: 6
      , tooltipXPadding: 8
      };

      return new Chart(ctx).Line(data, options);
    }
  }


  var socket = io.connect('http://'+window.location.host);
  socket.on('yodel:increments:<%=pageName.replace(' ', '_').toLowerCase(); %>', function (increments) {
    if (increments.length > 0) {
      for (var i = 0; i < increments.length; i++) {
        key = increments[i];
        last12h[0][key]++;
        sum24h[key]++;
        sum30d[key]++;
      }
    }
    renderNumbers();
    renderCharts();
  });


  // Refresh at the top of each hour since we're not handling
  //   full data refreshes with socket.io yet
  var now  = new Date().getTime()
    , hour = 60 * 60 * 1000
    , then = now - (now % hour) + hour;

  setTimeout(window.location.reload.bind(window.location), then - now + 5000);

</script>
<% include footer.ejs -%>
